/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bankapp;

import java.math.BigDecimal;
import java.math.RoundingMode;
import javax.swing.JOptionPane;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class AddAccountMenu extends javax.swing.JDialog {

    private Bank bank;
    private Customer customer;
    public AddAccountMenu(java.awt.Frame parent, boolean modal, Bank bank) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
        this.bank = bank;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FirstNameLabel = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        LastNameLabel = new javax.swing.JLabel();
        lastNameField = new javax.swing.JTextField();
        SSNLabel = new javax.swing.JLabel();
        ssnField = new javax.swing.JTextField();
        DepositLabel = new javax.swing.JLabel();
        depositField = new javax.swing.JTextField();
        TypeLabel = new javax.swing.JLabel();
        typeField = new javax.swing.JComboBox<>();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add Account Menu");
        getContentPane().setLayout(new java.awt.GridLayout(6, 2, 5, 5));

        FirstNameLabel.setText("First Name:");
        getContentPane().add(FirstNameLabel);
        getContentPane().add(firstNameField);

        LastNameLabel.setText("Last Name:");
        getContentPane().add(LastNameLabel);
        getContentPane().add(lastNameField);

        SSNLabel.setText("Social Security Number:");
        getContentPane().add(SSNLabel);
        getContentPane().add(ssnField);

        DepositLabel.setText("Initial Deposit:");
        getContentPane().add(DepositLabel);
        getContentPane().add(depositField);

        TypeLabel.setText("Account Type");
        getContentPane().add(TypeLabel);

        typeField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Checking", "Savings" }));
        getContentPane().add(typeField);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        getContentPane().add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        getContentPane().add(cancelButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        /* All fields must be filled */
        StringBuilder warnings = new StringBuilder();
        String firstName = "", lastName = "", ssn = "", deposit = "";
        double amount = 0;
        
        if(firstNameField.getText().isEmpty()){
            warnings.append("First name must not be empty.\n");
        }
        else{
            firstName = firstNameField.getText();
        }
        
        if(lastNameField.getText().isEmpty()){
            warnings.append("Last name must not be empty.\n");
        }
        else{
            lastName = lastNameField.getText();
        }
                        
        if(depositField.getText().isEmpty()){
            warnings.append("Initial deposit must not be empty.\n");                        
        }       
        else{
            try{       
                
                amount = round(Double.parseDouble(depositField.getText()), 2);
            }
            catch(NumberFormatException ex){
                warnings.append("Initial deposit must be a number.");
            }
        }
        
        if(ssnField.getText().matches("(\\d{3}-?)\\d(2)-?\\d{4}")){
            warnings.append("SSN field must be a number.\n");            
        }
        else{
            ssn = ssnField.getText().replace("-", "");
        }
        if(warnings.length() > 0){
            JOptionPane.showMessageDialog(this, warnings.toString(), 
                    "Input warnings",JOptionPane.WARNING_MESSAGE);
        }
        else{
            Account account = null;
            AccountType accountType = AccountType.Undefined;
            if(typeField.getSelectedItem().toString() == "Checking"){
                if(amount > 100)
                    accountType = AccountType.Checking;
                
            }
            else if(typeField.getSelectedItem().toString() == "Savings"){
               if(amount >= 50)
                   accountType = AccountType.Savings;
                else {
                    warnings.append("Initial deposit must be at least $50 for Savings accounts.");
                }
                
            }            
            if(accountType != AccountType.Undefined){            
               int accountId = bank.openAccount(firstName, lastName, ssn, accountType, amount);              
               customer = bank.getCustomer(accountId);
               this.dispose();
            }
        }
                
    }//GEN-LAST:event_okButtonActionPerformed
    
    public static double round(double value, int places) {
        if (places < 0) throw new IllegalArgumentException();
        BigDecimal bd = new BigDecimal(value);
        bd = bd.setScale(places, RoundingMode.HALF_UP);
        return bd.doubleValue();
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DepositLabel;
    private javax.swing.JLabel FirstNameLabel;
    private javax.swing.JLabel LastNameLabel;
    private javax.swing.JLabel SSNLabel;
    private javax.swing.JLabel TypeLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField depositField;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField ssnField;
    private javax.swing.JComboBox<String> typeField;
    // End of variables declaration//GEN-END:variables

    Customer getCustomer() {
        return customer;
    }
}
